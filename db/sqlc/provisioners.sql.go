// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: provisioners.sql

package db

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
	"github.com/lib/pq"
)

const createProvisionerAccount = `-- name: CreateProvisionerAccount :one
INSERT INTO provisioners (
    client_id,
    api_token,
    provisioner_account,
    environments,
    team,
    email,
    regular_expression,
    node_attestation,
    valid_subject_alternate_names,
    extended_keys,
    max_certificate_validity,
    created_at,
    created_by
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13
) RETURNING client_id, api_token, provisioner_account, environments, team, email, regular_expression, valid_subject_alternate_names, extended_keys, max_certificate_validity, node_attestation, created_at, created_by
`

type CreateProvisionerAccountParams struct {
	ClientID                   uuid.UUID      `json:"client_id"`
	ApiToken                   string         `json:"api_token"`
	ProvisionerAccount         string         `json:"provisioner_account"`
	Environments               []string       `json:"environments"`
	Team                       string         `json:"team"`
	Email                      string         `json:"email"`
	RegularExpression          sql.NullString `json:"regular_expression"`
	NodeAttestation            []string       `json:"node_attestation"`
	ValidSubjectAlternateNames []string       `json:"valid_subject_alternate_names"`
	ExtendedKeys               []string       `json:"extended_keys"`
	MaxCertificateValidity     int16          `json:"max_certificate_validity"`
	CreatedAt                  time.Time      `json:"created_at"`
	CreatedBy                  uuid.UUID      `json:"created_by"`
}

func (q *Queries) CreateProvisionerAccount(ctx context.Context, arg CreateProvisionerAccountParams) (*Provisioner, error) {
	row := q.db.QueryRowContext(ctx, createProvisionerAccount,
		arg.ClientID,
		arg.ApiToken,
		arg.ProvisionerAccount,
		pq.Array(arg.Environments),
		arg.Team,
		arg.Email,
		arg.RegularExpression,
		pq.Array(arg.NodeAttestation),
		pq.Array(arg.ValidSubjectAlternateNames),
		pq.Array(arg.ExtendedKeys),
		arg.MaxCertificateValidity,
		arg.CreatedAt,
		arg.CreatedBy,
	)
	var i Provisioner
	err := row.Scan(
		&i.ClientID,
		&i.ApiToken,
		&i.ProvisionerAccount,
		pq.Array(&i.Environments),
		&i.Team,
		&i.Email,
		&i.RegularExpression,
		pq.Array(&i.ValidSubjectAlternateNames),
		pq.Array(&i.ExtendedKeys),
		&i.MaxCertificateValidity,
		pq.Array(&i.NodeAttestation),
		&i.CreatedAt,
		&i.CreatedBy,
	)
	return &i, err
}

const deleteProvisionerAccount = `-- name: DeleteProvisionerAccount :exec
DELETE FROM provisioners 
WHERE client_id = $1
`

func (q *Queries) DeleteProvisionerAccount(ctx context.Context, clientID uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteProvisionerAccount, clientID)
	return err
}

const getProvisionerUUID = `-- name: GetProvisionerUUID :one
SELECT client_id, api_token, provisioner_account, environments, team, email, regular_expression, valid_subject_alternate_names, extended_keys, max_certificate_validity, node_attestation, created_at, created_by FROM provisioners
WHERE client_id = $1
`

func (q *Queries) GetProvisionerUUID(ctx context.Context, clientID uuid.UUID) (*Provisioner, error) {
	row := q.db.QueryRowContext(ctx, getProvisionerUUID, clientID)
	var i Provisioner
	err := row.Scan(
		&i.ClientID,
		&i.ApiToken,
		&i.ProvisionerAccount,
		pq.Array(&i.Environments),
		&i.Team,
		&i.Email,
		&i.RegularExpression,
		pq.Array(&i.ValidSubjectAlternateNames),
		pq.Array(&i.ExtendedKeys),
		&i.MaxCertificateValidity,
		pq.Array(&i.NodeAttestation),
		&i.CreatedAt,
		&i.CreatedBy,
	)
	return &i, err
}

const listProvisionerAccounts = `-- name: ListProvisionerAccounts :many
SELECT client_id, api_token, provisioner_account, environments, team, email, regular_expression, valid_subject_alternate_names, extended_keys, max_certificate_validity, node_attestation, created_at, created_by FROM provisioners
ORDER BY provisioners
LIMIT $1
OFFSET $2
`

type ListProvisionerAccountsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListProvisionerAccounts(ctx context.Context, arg ListProvisionerAccountsParams) ([]*Provisioner, error) {
	rows, err := q.db.QueryContext(ctx, listProvisionerAccounts, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*Provisioner{}
	for rows.Next() {
		var i Provisioner
		if err := rows.Scan(
			&i.ClientID,
			&i.ApiToken,
			&i.ProvisionerAccount,
			pq.Array(&i.Environments),
			&i.Team,
			&i.Email,
			&i.RegularExpression,
			pq.Array(&i.ValidSubjectAlternateNames),
			pq.Array(&i.ExtendedKeys),
			&i.MaxCertificateValidity,
			pq.Array(&i.NodeAttestation),
			&i.CreatedAt,
			&i.CreatedBy,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
