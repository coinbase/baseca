// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.21.0
// source: users.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
    uuid,
    username,
    hashed_credential,
    full_name,
    email,
    permissions
) VALUES (
    $1, $2, $3, $4, $5, $6
) RETURNING uuid, username, hashed_credential, full_name, email, permissions, credential_changed_at, created_at
`

type CreateUserParams struct {
	Uuid             uuid.UUID `json:"uuid"`
	Username         string    `json:"username"`
	HashedCredential string    `json:"hashed_credential"`
	FullName         string    `json:"full_name"`
	Email            string    `json:"email"`
	Permissions      string    `json:"permissions"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (*User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.Uuid,
		arg.Username,
		arg.HashedCredential,
		arg.FullName,
		arg.Email,
		arg.Permissions,
	)
	var i User
	err := row.Scan(
		&i.Uuid,
		&i.Username,
		&i.HashedCredential,
		&i.FullName,
		&i.Email,
		&i.Permissions,
		&i.CredentialChangedAt,
		&i.CreatedAt,
	)
	return &i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users 
WHERE username = $1
`

func (q *Queries) DeleteUser(ctx context.Context, username string) error {
	_, err := q.db.ExecContext(ctx, deleteUser, username)
	return err
}

const getUser = `-- name: GetUser :one
SELECT uuid, username, hashed_credential, full_name, email, permissions, credential_changed_at, created_at FROM users
WHERE username = $1 LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, username string) (*User, error) {
	row := q.db.QueryRowContext(ctx, getUser, username)
	var i User
	err := row.Scan(
		&i.Uuid,
		&i.Username,
		&i.HashedCredential,
		&i.FullName,
		&i.Email,
		&i.Permissions,
		&i.CredentialChangedAt,
		&i.CreatedAt,
	)
	return &i, err
}

const listUsers = `-- name: ListUsers :many
SELECT uuid, username, hashed_credential, full_name, email, permissions, credential_changed_at, created_at FROM users
ORDER BY username
LIMIT $1
OFFSET $2
`

type ListUsersParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListUsers(ctx context.Context, arg ListUsersParams) ([]*User, error) {
	rows, err := q.db.QueryContext(ctx, listUsers, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*User{}
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.Uuid,
			&i.Username,
			&i.HashedCredential,
			&i.FullName,
			&i.Email,
			&i.Permissions,
			&i.CredentialChangedAt,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUserAuthentication = `-- name: UpdateUserAuthentication :one
UPDATE users 
SET hashed_credential = $2, credential_changed_at = now() 
WHERE username = $1
RETURNING uuid, username, hashed_credential, full_name, email, permissions, credential_changed_at, created_at
`

type UpdateUserAuthenticationParams struct {
	Username         string `json:"username"`
	HashedCredential string `json:"hashed_credential"`
}

func (q *Queries) UpdateUserAuthentication(ctx context.Context, arg UpdateUserAuthenticationParams) (*User, error) {
	row := q.db.QueryRowContext(ctx, updateUserAuthentication, arg.Username, arg.HashedCredential)
	var i User
	err := row.Scan(
		&i.Uuid,
		&i.Username,
		&i.HashedCredential,
		&i.FullName,
		&i.Email,
		&i.Permissions,
		&i.CredentialChangedAt,
		&i.CreatedAt,
	)
	return &i, err
}

const updateUserPermission = `-- name: UpdateUserPermission :one
UPDATE users
SET permissions = $2
WHERE username = $1
RETURNING uuid, username, hashed_credential, full_name, email, permissions, credential_changed_at, created_at
`

type UpdateUserPermissionParams struct {
	Username    string `json:"username"`
	Permissions string `json:"permissions"`
}

func (q *Queries) UpdateUserPermission(ctx context.Context, arg UpdateUserPermissionParams) (*User, error) {
	row := q.db.QueryRowContext(ctx, updateUserPermission, arg.Username, arg.Permissions)
	var i User
	err := row.Scan(
		&i.Uuid,
		&i.Username,
		&i.HashedCredential,
		&i.FullName,
		&i.Email,
		&i.Permissions,
		&i.CredentialChangedAt,
		&i.CreatedAt,
	)
	return &i, err
}
