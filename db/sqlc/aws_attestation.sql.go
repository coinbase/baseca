// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: aws_attestation.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
	"github.com/lib/pq"
	"github.com/tabbed/pqtype"
)

const deleteInstanceIdentityDocument = `-- name: DeleteInstanceIdentityDocument :exec
DELETE FROM aws_attestation 
WHERE client_id = $1
`

func (q *Queries) DeleteInstanceIdentityDocument(ctx context.Context, clientID uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteInstanceIdentityDocument, clientID)
	return err
}

const getInstanceIdentityDocument = `-- name: GetInstanceIdentityDocument :one
SELECT client_id, role_arn, assume_role, security_group_id, region, instance_id, image_id, instance_tags from aws_attestation 
WHERE client_id = $1
`

func (q *Queries) GetInstanceIdentityDocument(ctx context.Context, clientID uuid.UUID) (*AwsAttestation, error) {
	row := q.db.QueryRowContext(ctx, getInstanceIdentityDocument, clientID)
	var i AwsAttestation
	err := row.Scan(
		&i.ClientID,
		&i.RoleArn,
		&i.AssumeRole,
		pq.Array(&i.SecurityGroupID),
		&i.Region,
		&i.InstanceID,
		&i.ImageID,
		&i.InstanceTags,
	)
	return &i, err
}

const storeInstanceIdentityDocument = `-- name: StoreInstanceIdentityDocument :one
INSERT into aws_attestation (
  client_id,
  role_arn,
  assume_role,
  security_group_id,
  region,
  instance_id,
  image_id,
  instance_tags
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8
) RETURNING client_id, role_arn, assume_role, security_group_id, region, instance_id, image_id, instance_tags
`

type StoreInstanceIdentityDocumentParams struct {
	ClientID        uuid.UUID             `json:"client_id"`
	RoleArn         sql.NullString        `json:"role_arn"`
	AssumeRole      sql.NullString        `json:"assume_role"`
	SecurityGroupID []string              `json:"security_group_id"`
	Region          sql.NullString        `json:"region"`
	InstanceID      sql.NullString        `json:"instance_id"`
	ImageID         sql.NullString        `json:"image_id"`
	InstanceTags    pqtype.NullRawMessage `json:"instance_tags"`
}

func (q *Queries) StoreInstanceIdentityDocument(ctx context.Context, arg StoreInstanceIdentityDocumentParams) (*AwsAttestation, error) {
	row := q.db.QueryRowContext(ctx, storeInstanceIdentityDocument,
		arg.ClientID,
		arg.RoleArn,
		arg.AssumeRole,
		pq.Array(arg.SecurityGroupID),
		arg.Region,
		arg.InstanceID,
		arg.ImageID,
		arg.InstanceTags,
	)
	var i AwsAttestation
	err := row.Scan(
		&i.ClientID,
		&i.RoleArn,
		&i.AssumeRole,
		pq.Array(&i.SecurityGroupID),
		&i.Region,
		&i.InstanceID,
		&i.ImageID,
		&i.InstanceTags,
	)
	return &i, err
}
