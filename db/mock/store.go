// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/coinbase/baseca/db/sqlc (interfaces: Store)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	db "github.com/coinbase/baseca/db/sqlc"
	types "github.com/coinbase/baseca/internal/types"
	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// CreateServiceAccount mocks base method.
func (m *MockStore) CreateServiceAccount(arg0 context.Context, arg1 db.CreateServiceAccountParams) (*db.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateServiceAccount", arg0, arg1)
	ret0, _ := ret[0].(*db.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateServiceAccount indicates an expected call of CreateServiceAccount.
func (mr *MockStoreMockRecorder) CreateServiceAccount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateServiceAccount", reflect.TypeOf((*MockStore)(nil).CreateServiceAccount), arg0, arg1)
}

// CreateUser mocks base method.
func (m *MockStore) CreateUser(arg0 context.Context, arg1 db.CreateUserParams) (*db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", arg0, arg1)
	ret0, _ := ret[0].(*db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockStoreMockRecorder) CreateUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockStore)(nil).CreateUser), arg0, arg1)
}

// DeleteInstanceIdentityDocument mocks base method.
func (m *MockStore) DeleteInstanceIdentityDocument(arg0 context.Context, arg1 uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteInstanceIdentityDocument", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteInstanceIdentityDocument indicates an expected call of DeleteInstanceIdentityDocument.
func (mr *MockStoreMockRecorder) DeleteInstanceIdentityDocument(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteInstanceIdentityDocument", reflect.TypeOf((*MockStore)(nil).DeleteInstanceIdentityDocument), arg0, arg1)
}

// DeleteServiceAccount mocks base method.
func (m *MockStore) DeleteServiceAccount(arg0 context.Context, arg1 uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteServiceAccount", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteServiceAccount indicates an expected call of DeleteServiceAccount.
func (mr *MockStoreMockRecorder) DeleteServiceAccount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteServiceAccount", reflect.TypeOf((*MockStore)(nil).DeleteServiceAccount), arg0, arg1)
}

// DeleteUser mocks base method.
func (m *MockStore) DeleteUser(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockStoreMockRecorder) DeleteUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockStore)(nil).DeleteUser), arg0, arg1)
}

// GetCertificate mocks base method.
func (m *MockStore) GetCertificate(arg0 context.Context, arg1 string) (*db.Certificate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCertificate", arg0, arg1)
	ret0, _ := ret[0].(*db.Certificate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCertificate indicates an expected call of GetCertificate.
func (mr *MockStoreMockRecorder) GetCertificate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCertificate", reflect.TypeOf((*MockStore)(nil).GetCertificate), arg0, arg1)
}

// GetInstanceIdentityDocument mocks base method.
func (m *MockStore) GetInstanceIdentityDocument(arg0 context.Context, arg1 uuid.UUID) (*db.AwsAttestation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstanceIdentityDocument", arg0, arg1)
	ret0, _ := ret[0].(*db.AwsAttestation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInstanceIdentityDocument indicates an expected call of GetInstanceIdentityDocument.
func (mr *MockStoreMockRecorder) GetInstanceIdentityDocument(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstanceIdentityDocument", reflect.TypeOf((*MockStore)(nil).GetInstanceIdentityDocument), arg0, arg1)
}

// GetServiceAccounts mocks base method.
func (m *MockStore) GetServiceAccounts(arg0 context.Context, arg1 string) ([]*db.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServiceAccounts", arg0, arg1)
	ret0, _ := ret[0].([]*db.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetServiceAccounts indicates an expected call of GetServiceAccounts.
func (mr *MockStoreMockRecorder) GetServiceAccounts(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServiceAccounts", reflect.TypeOf((*MockStore)(nil).GetServiceAccounts), arg0, arg1)
}

// GetServiceUUID mocks base method.
func (m *MockStore) GetServiceUUID(arg0 context.Context, arg1 uuid.UUID) (*db.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServiceUUID", arg0, arg1)
	ret0, _ := ret[0].(*db.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetServiceUUID indicates an expected call of GetServiceUUID.
func (mr *MockStoreMockRecorder) GetServiceUUID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServiceUUID", reflect.TypeOf((*MockStore)(nil).GetServiceUUID), arg0, arg1)
}

// GetUser mocks base method.
func (m *MockStore) GetUser(arg0 context.Context, arg1 string) (*db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", arg0, arg1)
	ret0, _ := ret[0].(*db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockStoreMockRecorder) GetUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockStore)(nil).GetUser), arg0, arg1)
}

// ListCertificateSubjectAlternativeName mocks base method.
func (m *MockStore) ListCertificateSubjectAlternativeName(arg0 context.Context, arg1 db.ListCertificateSubjectAlternativeNameParams) ([]*db.Certificate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCertificateSubjectAlternativeName", arg0, arg1)
	ret0, _ := ret[0].([]*db.Certificate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCertificateSubjectAlternativeName indicates an expected call of ListCertificateSubjectAlternativeName.
func (mr *MockStoreMockRecorder) ListCertificateSubjectAlternativeName(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCertificateSubjectAlternativeName", reflect.TypeOf((*MockStore)(nil).ListCertificateSubjectAlternativeName), arg0, arg1)
}

// ListCertificates mocks base method.
func (m *MockStore) ListCertificates(arg0 context.Context, arg1 db.ListCertificatesParams) ([]*db.Certificate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCertificates", arg0, arg1)
	ret0, _ := ret[0].([]*db.Certificate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCertificates indicates an expected call of ListCertificates.
func (mr *MockStoreMockRecorder) ListCertificates(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCertificates", reflect.TypeOf((*MockStore)(nil).ListCertificates), arg0, arg1)
}

// ListServiceAccounts mocks base method.
func (m *MockStore) ListServiceAccounts(arg0 context.Context, arg1 db.ListServiceAccountsParams) ([]*db.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListServiceAccounts", arg0, arg1)
	ret0, _ := ret[0].([]*db.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListServiceAccounts indicates an expected call of ListServiceAccounts.
func (mr *MockStoreMockRecorder) ListServiceAccounts(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListServiceAccounts", reflect.TypeOf((*MockStore)(nil).ListServiceAccounts), arg0, arg1)
}

// ListUsers mocks base method.
func (m *MockStore) ListUsers(arg0 context.Context, arg1 db.ListUsersParams) ([]*db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUsers", arg0, arg1)
	ret0, _ := ret[0].([]*db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUsers indicates an expected call of ListUsers.
func (mr *MockStoreMockRecorder) ListUsers(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUsers", reflect.TypeOf((*MockStore)(nil).ListUsers), arg0, arg1)
}

// LogCertificate mocks base method.
func (m *MockStore) LogCertificate(arg0 context.Context, arg1 db.LogCertificateParams) (*db.Certificate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LogCertificate", arg0, arg1)
	ret0, _ := ret[0].(*db.Certificate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LogCertificate indicates an expected call of LogCertificate.
func (mr *MockStoreMockRecorder) LogCertificate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LogCertificate", reflect.TypeOf((*MockStore)(nil).LogCertificate), arg0, arg1)
}

// RevokeIssuedCertificateSerialNumber mocks base method.
func (m *MockStore) RevokeIssuedCertificateSerialNumber(arg0 context.Context, arg1 db.RevokeIssuedCertificateSerialNumberParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RevokeIssuedCertificateSerialNumber", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RevokeIssuedCertificateSerialNumber indicates an expected call of RevokeIssuedCertificateSerialNumber.
func (mr *MockStoreMockRecorder) RevokeIssuedCertificateSerialNumber(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RevokeIssuedCertificateSerialNumber", reflect.TypeOf((*MockStore)(nil).RevokeIssuedCertificateSerialNumber), arg0, arg1)
}

// StoreInstanceIdentityDocument mocks base method.
func (m *MockStore) StoreInstanceIdentityDocument(arg0 context.Context, arg1 db.StoreInstanceIdentityDocumentParams) (*db.AwsAttestation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreInstanceIdentityDocument", arg0, arg1)
	ret0, _ := ret[0].(*db.AwsAttestation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StoreInstanceIdentityDocument indicates an expected call of StoreInstanceIdentityDocument.
func (mr *MockStoreMockRecorder) StoreInstanceIdentityDocument(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreInstanceIdentityDocument", reflect.TypeOf((*MockStore)(nil).StoreInstanceIdentityDocument), arg0, arg1)
}

// TxCreateServiceAccount mocks base method.
func (m *MockStore) TxCreateServiceAccount(arg0 context.Context, arg1 db.CreateServiceAccountParams, arg2 db.StoreInstanceIdentityDocumentParams) (*db.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TxCreateServiceAccount", arg0, arg1, arg2)
	ret0, _ := ret[0].(*db.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TxCreateServiceAccount indicates an expected call of TxCreateServiceAccount.
func (mr *MockStoreMockRecorder) TxCreateServiceAccount(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TxCreateServiceAccount", reflect.TypeOf((*MockStore)(nil).TxCreateServiceAccount), arg0, arg1, arg2)
}

// TxDeleteServiceAccount mocks base method.
func (m *MockStore) TxDeleteServiceAccount(arg0 context.Context, arg1 uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TxDeleteServiceAccount", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// TxDeleteServiceAccount indicates an expected call of TxDeleteServiceAccount.
func (mr *MockStoreMockRecorder) TxDeleteServiceAccount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TxDeleteServiceAccount", reflect.TypeOf((*MockStore)(nil).TxDeleteServiceAccount), arg0, arg1)
}

// TxUpdateServiceAccount mocks base method.
func (m *MockStore) TxUpdateServiceAccount(arg0 context.Context, arg1 db.Account, arg2 types.NodeAttestation) (*db.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TxUpdateServiceAccount", arg0, arg1, arg2)
	ret0, _ := ret[0].(*db.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TxUpdateServiceAccount indicates an expected call of TxUpdateServiceAccount.
func (mr *MockStoreMockRecorder) TxUpdateServiceAccount(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TxUpdateServiceAccount", reflect.TypeOf((*MockStore)(nil).TxUpdateServiceAccount), arg0, arg1, arg2)
}

// UpdateInstanceIdentityNodeAttestor mocks base method.
func (m *MockStore) UpdateInstanceIdentityNodeAttestor(arg0 context.Context, arg1 db.UpdateInstanceIdentityNodeAttestorParams) (*db.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateInstanceIdentityNodeAttestor", arg0, arg1)
	ret0, _ := ret[0].(*db.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateInstanceIdentityNodeAttestor indicates an expected call of UpdateInstanceIdentityNodeAttestor.
func (mr *MockStoreMockRecorder) UpdateInstanceIdentityNodeAttestor(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateInstanceIdentityNodeAttestor", reflect.TypeOf((*MockStore)(nil).UpdateInstanceIdentityNodeAttestor), arg0, arg1)
}

// UpdateServiceAccount mocks base method.
func (m *MockStore) UpdateServiceAccount(arg0 context.Context, arg1 db.UpdateServiceAccountParams) (*db.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateServiceAccount", arg0, arg1)
	ret0, _ := ret[0].(*db.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateServiceAccount indicates an expected call of UpdateServiceAccount.
func (mr *MockStoreMockRecorder) UpdateServiceAccount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateServiceAccount", reflect.TypeOf((*MockStore)(nil).UpdateServiceAccount), arg0, arg1)
}

// UpdateUserAuthentication mocks base method.
func (m *MockStore) UpdateUserAuthentication(arg0 context.Context, arg1 db.UpdateUserAuthenticationParams) (*db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserAuthentication", arg0, arg1)
	ret0, _ := ret[0].(*db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUserAuthentication indicates an expected call of UpdateUserAuthentication.
func (mr *MockStoreMockRecorder) UpdateUserAuthentication(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserAuthentication", reflect.TypeOf((*MockStore)(nil).UpdateUserAuthentication), arg0, arg1)
}

// UpdateUserPermission mocks base method.
func (m *MockStore) UpdateUserPermission(arg0 context.Context, arg1 db.UpdateUserPermissionParams) (*db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserPermission", arg0, arg1)
	ret0, _ := ret[0].(*db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUserPermission indicates an expected call of UpdateUserPermission.
func (mr *MockStoreMockRecorder) UpdateUserPermission(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserPermission", reflect.TypeOf((*MockStore)(nil).UpdateUserPermission), arg0, arg1)
}
